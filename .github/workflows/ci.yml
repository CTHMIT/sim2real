# .github/workflows/ci.yml

name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Cache PDM environment
        uses: actions/cache@v4
        id: pdm-cache
        with:
          path: .venv
          key: ${{ runner.os }}-pdm-${{ hashFiles('**/pdm.lock') }}
          restore-keys: |
            ${{ runner.os }}-pdm-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pdm
          pdm install

      - name: Run pre-commit
        run: |
          pip install pre-commit
          pdm run pre-commit run --all-files

  bump-version:
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Cache PDM environment
        uses: actions/cache@v4
        with:
          path: .venv
          key: ${{ runner.os }}-pdm-${{ hashFiles('**/pdm.lock') }}
          restore-keys: |
            ${{ runner.os }}-pdm-

      - name: Install PDM tool
        run: |
          python -m pip install --upgrade pip
          pip install pdm

      - name: Detect bump level based on last commit
        id: detect
        run: |

          LAST_COMMIT=$(git log -1 --pretty=%B)
          echo "Commit: $LAST_COMMIT"

          if echo "$LAST_COMMIT" | grep -qE '^(BREAKING CHANGE|BREAKING):'; then
            echo "bump=major" >> $GITHUB_OUTPUT
          elif echo "$LAST_COMMIT" | grep -qE '^feat:'; then
            echo "bump=minor" >> $GITHUB_OUTPUT
          elif echo "$LAST_COMMIT" | grep -qE '^fix:'; then
            echo "bump=patch" >> $GITHUB_OUTPUT
          else
            echo "bump=none" >> $GITHUB_OUTPUT
            echo "No version bump needed based on commit message."
          fi

      - name: Bump version using PDM
        if: steps.detect.outputs.bump != 'none'
        run: |
          echo "Bumping version with level: ${{ steps.detect.outputs.bump }}"
          pdm version ${{ steps.detect.outputs.bump }}

          echo "NEW_VERSION=$(pdm version)" >> $GITHUB_ENV

      - name: Commit, Tag & Push changes

        if: steps.detect.outputs.bump != 'none'
        run: |
          echo "Committing and pushing version ${{ env.NEW_VERSION }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add pyproject.toml

          git commit -m "ci: auto bump version to ${{ env.NEW_VERSION }} [skip ci]"
          git tag v${{ env.NEW_VERSION }}

          git push origin main
          git push origin v${{ env.NEW_VERSION }}

      - name: Create GitHub Release
        if: steps.detect.outputs.bump != 'none'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.NEW_VERSION }}
          name: Release v${{ env.NEW_VERSION }}
          body: |
            Auto Create Version:v${{ env.NEW_VERSION }}
            Automatically generated by CI based on Commitã€‚
            Triggering Commit: `${{ github.event.head_commit.message }}`
        env:

          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
